# Default values for jenkins.
# This is a YAML-formatted file.
# Declare name/value pairs to be passed into your templates.
# name: value

Master:
  Name: jenkins-master
  Image: "jenkins/jenkins"
  ImageTag: "latest"
  ImagePullPolicy: "Always"
  Component: "jenkins-master"
  UseSecurity: true
  AdminUser: admin
  AdminPassword: $developer17@!
  Cpu: "200m"
  Memory: "256Mi"
# Set min/max heap here if needed with:
# JavaOpts: "-Xms512m -Xmx512m"
# JenkinsOpts: ""
# JenkinsUriPrefix: "/jenkins"
  ServicePort: 8080
# For minikube, set this to NodePort, elsewhere use LoadBalancer
# Use ClusterIP if your setup includes ingress controller
  ServiceType: LoadBalancer
# Master Service annotations
  ServiceAnnotations: {}
    #   service.beta.kubernetes.io/aws-load-balancer-backend-protocol: https
# Used to create Ingress record (should used with ServiceType: ClusterIP)
# HostName: jenkins.cluster.local
# NodePort: <to set explicitly, choose port between 30000-32767
  ContainerPort: 8080
  SlaveListenerPort: 50000
  LoadBalancerSourceRanges:
  - 0.0.0.0/0
# Optionally assign a known public LB IP
# LoadBalancerIP: 1.2.3.4
# Optionally configure a JMX port
# requires additional JavaOpts, ie
# JavaOpts: >
#   -Dcom.sun.management.jmxremote.port=4000
#   -Dcom.sun.management.jmxremote.authenticate=false
#   -Dcom.sun.management.jmxremote.ssl=false
# JMXPort: 4000
# List of plugins to be install during Jenkins master start
  InstallPlugins:
      - kubernetes:1.1
      - workflow-aggregator:2.5
      - workflow-job:2.15
      - credentials-binding:1.13
      - git:3.6.4
      - blueocean:1.3.3
      - permissive-script-security:0.3
      - kubernetes-ci:1.3
      - oic-auth-plugin:1.0
      - openid4java:0.9.8
# Used to approve a list of groovy functions in pipelines used the script-security plugin. Can be viewed under /scriptApproval
  ScriptApproval:
    - "staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods readLines java.lang.String"
  #   - "new groovy.json.JsonSlurperClassic"
# List of groovy init scripts to be executed during Jenkins master start
  InitScripts:
  - |
    import jenkins.model.Jenkins;
    import org.jenkinsci.plugins.workflow.job.WorkflowJob
    import com.cloudbees.plugins.credentials.*
    import com.cloudbees.plugins.credentials.common.*
    import com.cloudbees.plugins.credentials.domains.*
    import com.cloudbees.jenkins.plugins.sshcredentials.impl.*
    import org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition
    import hudson.plugins.git.*;

    import hudson.plugins.sshslaves.*

    global_domain = Domain.global()
    credentials_store = Jenkins.instance.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()
    credentials = new BasicSSHUserPrivateKey(
            CredentialsScope.GLOBAL,
            'cd_pipeline_id_rsa',
            'cd_pipeline_id_rsa',
            new BasicSSHUserPrivateKey.DirectEntryPrivateKeySource("""-----BEGIN RSA PRIVATE KEY-----
    MIIEpQIBAAKCAQEAwjW2JBO5eI0AesvRlqf38OHdqZopiBuj+kSp/SyQy08OwhpT
    BH5QhRv3/c21SDD6qU1wmFINIcyar5dHZL7Eb6/QRw4u0xpgJYc/UclsV+falZKQ
    FMK2g3Xqp9SgJiHkbSRiUmILsEtryjAjP8CsGfn6rIFLLQho0jrd2mDeZIMPeASH
    LYf7Uvrfdd/baIgA8+cfEux1x7lZvQ+XE/xIBI7BTwacfdnKdXj9Zo3+EEEkDijk
    yZ/k6BWXgY+cUZTicqeib/W3OYgJyq1rQtrPDai/yWB3+Np+PacFEQwajp89oeRg
    WYgYVjs75nF1N4C1gA5tN9k9bHbTgE2stMpMlwIDAQABAoIBAQCgKSl3oSigqS/P
    FQ1YgFcyOSLTfsZnb9wQRdYmaz1R3XXfT1RNbVo8G++tSJsK2RGu06VaiLg5uoGK
    82g2Rji7nrNWFfU5tRO7f0kRytnluNiD52WZKWbZDUKie/BC4kp+U7YeGKtpDRns
    mTxIlD2aApTe9JWporjHPzK8qIxfOGAfC1gCul76neJ4LxH5dFdPU6L5bQB6chpL
    +DtbtZ4XxE8RZHNEZ5UXigt+0zxNvenne8JERSOW8kkhAiu0nrekpOuUDJkyNSi+
    J4UgKlVLRqsLACyUzrXHOxelH7OCwNxuc/KI9d/sd9iPU3VycDAJku9acjKEke1T
    MUj0R2PBAoGBAPqUfWq806QEuCRT0V4m+OmncNzaJH85aF00nWYXcW+A8UWiEtku
    mSneUbrUatabrp75aSjBwevZ/+yPLE95WkIOJ+Nvw/PRvS1q0jIQ7ux1PPGc4ARe
    C9tixGiPY7M/AcQ5obcQhBbXgOkayqTuRgzdvxrFkkXTkvNTBMg8jwv3AoGBAMZp
    FrczDjl4RTehRl3NbgaaimW48wnShpBFwu4hIMxt30e+poZGMl4jzUYLHKBfMeii
    Jx8xEuB3ghV3nQMyKnkyAjvwTVzHLnZyF1DI7DIRdy+aV8jy/f12Sh3UT2d77d40
    rA5KD3zqW+1el0TkgbXiK0gOo8ziLX9YfArhhlxhAoGBAPKflFAlRUcqyqFiBvcD
    BUA3wDAXh/8ntsWIjF6tlEhCsVqa82UWmXbQrJIZ2tixJQMIu6ma8glLq2GBv4W0
    GpCa5ERzk2ghTOsM4zlW7ABIBBptqvqPlSt3FnWnYQHNoAg/RTXb6Am14DvUlSHd
    FDag/skNQ/QYR9ESMS8wc9FBAoGANmyzL3OQzlDgY78YZzinmqYfmoGeIS6ffMm2
    C84IiisFWU/BrAlrXYlikHkR1Cfor9By/MpgTDRb+XmDF1JWdkIyfLCQ+AcnBpSL
    Mry6lY1W7TbgJ54H79PXxtDrKw7Ck/ZMz+qezvwWVUliIyKvNe4hQzXI1rWgF1N1
    SyLL0WECgYEAsWqPXrzzg1TEiZyGMQDOuYR2IodNfPIR3buDUdM3BDG0UxTJAGOB
    Z3gGLAl3s9gRQjCf3kQKOArYDlVEaF/gadvp+BqSAEuGPUX8KOMVkkeU+T5D1POe
    823gr+ABxPUlo2oPTLBpuuPePOs5/cglTeC8cOIqEUBftTUP9Nb1L9o=
    -----END RSA PRIVATE KEY-----
    """),
            "",
            ""
    )
    credentials_store.addCredentials(global_domain, credentials)

    WorkflowJob job = Jenkins.instance.createProject(WorkflowJob, 'forsythe-aag-devops')

    def scm = new GitSCM('git@github.com:cd-pipeline/hello-world-service.git')
    scm.branches = [new BranchSpec("*/master")];
    scm.userRemoteConfigs[0].credentialsId = 'cd_pipeline_id_rsa'

    def flowDefinition = new CpsScmFlowDefinition(scm, 'Jenkinsfile')
    job.definition = flowDefinition
    job.setConcurrentBuild(false);
    job.save()

    job.scheduleBuild2(0)
    Jenkins.instance.reload()
  CustomConfigMap: false
# Node labels and tolerations for pod assignment
# ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
# ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature
  NodeSelector: {}
  Tolerations: {}

  Ingress:
    Annotations:
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"

    TLS:
      # - secretName: jenkins.cluster.local
      #   hosts:
      #     - jenkins.cluster.local

Agent:
  Enabled: true
  Image: jenkinsci/jnlp-slave
  ImageTag: 2.62
  Component: "jenkins-slave"
  Privileged: false
  Cpu: "200m"
  Memory: "256Mi"
  # You may want to change this to true while testing a new image
  AlwaysPullImage: false
  # You can define the volumes that you want to mount for this container
  # Allowed types are: ConfigMap, EmptyDir, HostPath, Nfs, Pod, Secret
  # Configure the attributes as they appear in the corresponding Java class for that type
  # https://github.com/jenkinsci/kubernetes-plugin/tree/master/src/main/java/org/csanchez/jenkins/plugins/kubernetes/volumes
  volumes:
  # - type: Secret
  #   secretName: mysecret
  #   mountPath: /var/myapp/mysecret
  NodeSelector: {}
  # Key Value selectors. Ex:
  # jenkins-agent: v1

Persistence:
  Enabled: true
  ## A manually managed Persistent Volume and Claim
  ## Requires Persistence.Enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  # ExistingClaim:

  ## jenkins data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # StorageClass: "-"

  AccessMode: ReadWriteOnce
  Size: 8Gi
  volumes:
#  - name: nothing
#    emptyDir: {}
  mounts:
#  - mountPath: /var/nothing
#    name: nothing
#    readOnly: true

NetworkPolicy:
  # Enable creation of NetworkPolicy resources.
  Enabled: false
  # For Kubernetes v1.4, v1.5 and v1.6, use 'extensions/v1beta1'
  # For Kubernetes v1.7, use 'networking.k8s.io/v1'
  ApiVersion: extensions/v1beta1

## Install Default RBAC roles and bindings
rbac:
  install: false
  serviceAccountName: default
  # RBAC api version (currently either v1beta1 or v1alpha1)
  apiVersion: v1beta1
  # Cluster role reference
  roleRef: cluster-admin