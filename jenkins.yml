# Default values for jenkins.
# This is a YAML-formatted file.
# Declare name/value pairs to be passed into your templates.
# name: value

Master:
  Name: jenkins-master
  Image: "jenkins/jenkins"
  ImageTag: "latest"
  ImagePullPolicy: "Always"
  Component: "jenkins-master"
  UseSecurity: true
  AdminUser: admin
  AdminPassword: $forsythe17@!
  Cpu: "200m"
  Memory: "256Mi"
# Set min/max heap here if needed with:
# JavaOpts: "-Xms512m -Xmx512m"
# JenkinsOpts: ""
# JenkinsUriPrefix: "/jenkins"
  ServicePort: 8080
# For minikube, set this to NodePort, elsewhere use LoadBalancer
# Use ClusterIP if your setup includes ingress controller
  ServiceType: LoadBalancer
# Master Service annotations
  ServiceAnnotations: {}
    #   service.beta.kubernetes.io/aws-load-balancer-backend-protocol: https
# Used to create Ingress record (should used with ServiceType: ClusterIP)
# HostName: jenkins.cluster.local
# NodePort: <to set explicitly, choose port between 30000-32767
  ContainerPort: 8080
  SlaveListenerPort: 50000
  LoadBalancerSourceRanges:
  - 0.0.0.0/0
# Optionally assign a known public LB IP
# LoadBalancerIP: 1.2.3.4
# Optionally configure a JMX port
# requires additional JavaOpts, ie
# JavaOpts: >
#   -Dcom.sun.management.jmxremote.port=4000
#   -Dcom.sun.management.jmxremote.authenticate=false
#   -Dcom.sun.management.jmxremote.ssl=false
# JMXPort: 4000
# List of plugins to be install during Jenkins master start
  InstallPlugins:
      - kubernetes:1.1
      - workflow-aggregator:2.5
      - workflow-job:2.15
      - credentials-binding:1.13
      - git:3.6.4
      - blueocean:1.3.3
      - permissive-script-security:0.3
      - kubernetes-ci:1.3
      - oic-auth-plugin:1.0
      - openid4java:0.9.8
# Used to approve a list of groovy functions in pipelines used the script-security plugin. Can be viewed under /scriptApproval
  ScriptApproval:
    - "staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods readLines java.lang.String"
  #   - "new groovy.json.JsonSlurperClassic"
# List of groovy init scripts to be executed during Jenkins master start
  InitScripts:
  - |
    import jenkins.model.Jenkins;
    import org.jenkinsci.plugins.workflow.job.WorkflowJob
    import com.cloudbees.plugins.credentials.*
    import com.cloudbees.plugins.credentials.common.*
    import com.cloudbees.plugins.credentials.domains.*
    import com.cloudbees.jenkins.plugins.sshcredentials.impl.*
    import org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition
    import hudson.plugins.git.*;
    import org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject;
    import jenkins.plugins.git.GitSCMSource;
    import jenkins.branch.*

    import hudson.plugins.sshslaves.*

    global_domain = Domain.global()
    credentials_store = Jenkins.instance.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()
    credentials = new BasicSSHUserPrivateKey(
            CredentialsScope.GLOBAL,
            'cd_pipeline_id_rsa',
            'cd_pipeline_id_rsa',
            new BasicSSHUserPrivateKey.DirectEntryPrivateKeySource("""-----BEGIN RSA PRIVATE KEY-----
    MIIEowIBAAKCAQEAthuXHaoJxkUWowHn1ftcRIiT+VYfJBGT/6EhIUwb6Abe02Ra
    zxdzUn4I2o6juWyMUelNYkDuUHVFkJENxiybs0A+13qF3N7ckQB1+1GvCGXe502d
    WjC4c1cFyk0ScEDlCMMfo+E120Glto1tQcTH2CAaBNCGpC3IfuVmUoqy4YDn3W9n
    aaZ1s2AkWZNjU7zX079SYaEzAVv6M5lDMC/Q9H01oSV1vXH7Go48LdckZ0QVYoRB
    kZGzZ/EtWl8PE7cKaNjdlvwPVdVOIG5sTjJCydcCOBRP6INlUtL8b0UsITF0nZpg
    ERkLMBvmyMwRl0v8C3hwLVPSHwafla7C/RrGxwIDAQABAoIBABa0a+vj5mIU/RSH
    yUrxkvhset6McUeC9YvaoBHRtm0AZkm+6l+FkfhIBHyTajBVK02PI/nLFKttY6X5
    n9kEeMkpimw9N3FpS+C8SPlznroSUW9PSv4SsvyWbf9iCpl6TdQA1/ILwzY6Aho3
    mdaoXS5CGlxdT1wq5SOFIHPMHS9mOCqiQLQo3hsZpdlMzBuSJkl1ZF3PUuRmOF5P
    SY5+LwDL6o1R8f15sbOKLZo5gIMH/JIEHLth/eQIfTehBoTZTj0m5BiV3ISnJKLj
    XQniLebnzquEwCjIPSoAf+K9ql21m0lgGYBLBAQooWiGTUmVzDS+B8NOgqvoJ2PC
    AD0hCUkCgYEA2fs47/l5wheuQc+JI9/Q9bK+NpIGyF9K7Hsq6owvlXLEtv0WRreo
    jvizUQG/iEuLzX+HrUiDK/bfoVQDUUtjBSyTLddcNvsMnpV4c5jXf+Tq1uebxoi5
    gBkPIE+gCzEW5cmXtqRyt/izIXsLvFsU2Nkl7lFyZIRJ9HKnV4H+xAMCgYEA1d6g
    wn4hSf6kylqV79y+nY8j9BPpuQ/AInnQAczFELXLUDOxdwmugQ22qj5Csn4k4lhU
    H8CfNDI9RrfuVMxwHvmA1JP7i7ReL1aTmLxlo7/OIwBooYNeDuMtun+nuclpYpcf
    nWmgNLoBTN149+ffGxivywk0/J0/tsNdhAIqcO0CgYAeQeH4ZY/CIllc5zrpEONH
    h6UhnAl2/MtAoiQl5ImiXAj0QZM7A7lRBzKU1wJIH/xq7P3fTsZubtlB4pCHU0iO
    ak6PuWoic5yf0q2ilh+rsBHs/L9Bwq7FGjVgTc0wYIMGKIJ3psIJyWrMBfFuFtKA
    +ztppkKTs000skmKOxArEwKBgGIOkOabreefOS8OGXDAZSUYXAOsnZyb/BvSfexV
    VoUy1OUQzm0lozzIbNfhc/MiowakOO3WAyiLYEzsR/nZQg7xln/g2ZRUPlq19zYw
    KunJJ1ok9dQXxyhMQMshfGVSU19Aqt4hb7K9FZuIb846IbDqwK72qbSo5G2HZXkB
    BTSBAoGBAIACK26D42/1xMQI2fBajWlBIeHeluTV6v8jgZYHiIv+jdezbFM8+zrW
    y5B8WzyEjK40NdWAsuvcV1H+Xsw29MpvMG1/AZF3YMEtVuPscP3VhtGusN+XzvvK
    7tu3K8CbuniU/c7nuj8uhSL9efVAIwe04mm44WI4WCvkAOplL942
    -----END RSA PRIVATE KEY-----
    """),
            "",
            ""
    )
    credentials_store.addCredentials(global_domain, credentials)

    def job = Jenkins.instance.createProject(WorkflowMultiBranchProject, 'forsythe-aag-devops')
    job.getSourcesList().add(new BranchSource(new GitSCMSource(null, "git@github.com:cd-pipeline/charts.git",
                                                                 "cd_pipeline_id_rsa", "master", "", false),
                                                new DefaultBranchPropertyStrategy(new BranchProperty[0])));
    job.save()
    job.scheduleBuild2(0)
  CustomConfigMap: false
# Node labels and tolerations for pod assignment
# ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
# ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature
  NodeSelector: {}
  Tolerations: {}

  Ingress:
    Annotations:
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"

    TLS:
      # - secretName: jenkins.cluster.local
      #   hosts:
      #     - jenkins.cluster.local

Agent:
  Enabled: true
  Image: jenkinsci/jnlp-slave
  ImageTag: 2.62
  Component: "jenkins-slave"
  Privileged: false
  Cpu: "200m"
  Memory: "256Mi"
  # You may want to change this to true while testing a new image
  AlwaysPullImage: false
  # You can define the volumes that you want to mount for this container
  # Allowed types are: ConfigMap, EmptyDir, HostPath, Nfs, Pod, Secret
  # Configure the attributes as they appear in the corresponding Java class for that type
  # https://github.com/jenkinsci/kubernetes-plugin/tree/master/src/main/java/org/csanchez/jenkins/plugins/kubernetes/volumes
  volumes:
  # - type: Secret
  #   secretName: mysecret
  #   mountPath: /var/myapp/mysecret
  NodeSelector: {}
  # Key Value selectors. Ex:
  # jenkins-agent: v1

Persistence:
  Enabled: true
  ## A manually managed Persistent Volume and Claim
  ## Requires Persistence.Enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  # ExistingClaim:

  ## jenkins data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # StorageClass: "-"

  AccessMode: ReadWriteOnce
  Size: 8Gi
  volumes:
#  - name: nothing
#    emptyDir: {}
  mounts:
#  - mountPath: /var/nothing
#    name: nothing
#    readOnly: true

NetworkPolicy:
  # Enable creation of NetworkPolicy resources.
  Enabled: false
  # For Kubernetes v1.4, v1.5 and v1.6, use 'extensions/v1beta1'
  # For Kubernetes v1.7, use 'networking.k8s.io/v1'
  ApiVersion: extensions/v1beta1

## Install Default RBAC roles and bindings
rbac:
  install: false
  serviceAccountName: default
  # RBAC api version (currently either v1beta1 or v1alpha1)
  apiVersion: v1beta1
  # Cluster role reference
  roleRef: cluster-admin